#!/bin/bash

# Default behavior
BUILD_MODE="auto"  # auto, build, fetch
CONTAINER_IMAGE="pitrac-yocto-builder:latest"
REGISTRY_IMAGE="ghcr.io/sammich10/pitrac-yocto/pitrac-yocto-builder:v1.0.1"

# Parse command line arguments
PODMAN_ARGS=()
while [[ $# -gt 0 ]]; do
    case $1 in
        -b|--build)
            BUILD_MODE="build"
            shift
            ;;
        -f|--fetch)
            BUILD_MODE="fetch"
            shift
            ;;
        -h|--help)
            echo "Usage: $0 [options]"
            echo "Options:"
            echo "  -b, --build      Force build container from Containerfile"
            echo "  -f, --fetch      Force fetch container from registry"
            echo "  -h, --help       Show this help message"
            echo ""
            echo "Default behavior: Auto-detect (build if Containerfile exists, otherwise fetch)"
            echo "All other arguments are passed to podman run"
            exit 0
            ;;
        *)
            PODMAN_ARGS+=("$1")
            shift
            ;;
    esac
done

# Get the CWD for the repository
CWD=$(pwd)
echo "Attaching at ${CWD}"

# Container management functions
build_container() {
    echo "Building container from Containerfile..."
    if [ ! -f "Containerfile" ]; then
        echo "Error: Containerfile not found in current directory"
        exit 1
    fi

    podman build -f Containerfile -t "${CONTAINER_IMAGE}" . || {
        echo "Failed to build PiTrac builder container image."
        exit 1
    }
    echo "Container built successfully"
}

fetch_container() {
    echo "Fetching container from registry..."
    podman pull "${REGISTRY_IMAGE}" || {
        echo "Failed to pull container from registry: ${REGISTRY_IMAGE}"
        echo "Try using -b/--build to build from Containerfile instead"
        exit 1
    }
    
    # Tag the pulled image with local name
    podman tag "${REGISTRY_IMAGE}" "${CONTAINER_IMAGE}" || {
        echo "Failed to tag pulled image"
        exit 1
    }
    echo "Container fetched and tagged successfully"
}

check_container_exists() {
    podman image exists "${CONTAINER_IMAGE}"
}

# Determine what to do based on mode
case $BUILD_MODE in
    "build")
        build_container
        ;;
    "fetch")
        fetch_container
        ;;
    "auto")
        echo "Auto-detecting container strategy..."
        
        # Check if container already exists locally
        if check_container_exists; then
            echo "Container ${CONTAINER_IMAGE} already exists locally"
        elif [ -f "Containerfile" ]; then
            echo "Containerfile found, building locally..."
            build_container
        else
            echo "No Containerfile found, attempting to fetch from registry..."
            fetch_container
        fi
        ;;
    *)
        echo "Invalid build mode: $BUILD_MODE"
        exit 1
        ;;
esac

# Get the host user's UID and GID
HOST_UID=$(id -u)
HOST_GID=$(id -g)

echo "Starting container..."

# Run the container
podman run -it --rm \
    --privileged \
    "${PODMAN_ARGS[@]}" \
    --env-host=false \
    -v "${CWD}:${CWD}" \
    -w "${CWD}" \
    --uidmap 0:${HOST_UID}:1 \
    --uidmap ${HOST_UID}:0:1 \
    --gidmap 0:${HOST_GID}:1 \
    --gidmap ${HOST_GID}:0:1 \
    -u ${HOST_UID}:${HOST_GID} \
    --entrypoint "/bin/bash" \
    --name pitrac-builder \
    "${CONTAINER_IMAGE}"